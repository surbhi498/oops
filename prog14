Code: Merge Sort
Send Feedback
Sort a given linked list using Merge Sort.
You don't need to print the elements, just sort the elements and return the head of updated LL.
Input format :
Linked list elements (separated by space and terminated by -1)
Output format :
Updated LL elements (separated by space)
Constraints :
1 <= Length of LL <= 1000
Sample Input 1 :
1 4 5 2 -1
Sample Output 1 :
1 2 4 5

// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/

node* mergeTwoLLs(node *head1, node *head2);
node* mergeSort(node *head) 
{
 
    
//write your code here
int count = 0;
node *temp = head;
node *temp1 = head;    
node *head2; 
node *head1;
node *head21;    
node *jk;       
if(head==NULL)
{
    
return head;    
    
}   
if(head->next == NULL)    
{
    
return head;    
    
    
}    
 
while(temp != NULL)
{
    count++;
    temp = temp->next;
    
    
    
}    
    
int mid = (count-1)/2;
for(int i =0;i<mid;i++)
{
    
temp1=temp1->next;    
    
    
}    
head2 = temp1->next;    
//node*mid=findmid(head);  
temp1->next = NULL;   
head1 =(mergeSort(head)); 
head21 =(mergeSort(head2));
jk = mergeTwoLLs(head1, head21);
return jk;    
    
}


node* mergeTwoLLs(node *head1, node *head2) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input is handled automatically.
     */
    
    
node *fh;
node *ft;
node *prev;    

if(head1->data < head2->data)
{
    
fh=head1;
ft=head1;  
prev=head1;       
head1 = head1->next;     
    
}    
else{
    
    
fh=head2;
ft=head2;  
prev = head2;        
head2=head2->next;     
        

    
    
} 
 
while(head1 != NULL && head2 != NULL)
{

if(head1->data < head2->data)
{
    
ft=head1;  
    
prev->next=ft;
prev = ft;    
head1=head1->next;    
    
}    
    
else
{
    
ft=head2;
prev->next=ft;
prev= ft;    
//head2->next=ft;    
head2=head2->next;    
    
}    
 
  
    
    
}    

if(!head1 && head2 ){
prev->next = head2;    
    
    
}    
    
 else if(!head2 && head1){
     
     
prev->next = head1;    
     
 }   
    
return fh;    
    
    
    
}








