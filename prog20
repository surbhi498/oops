Delete every N nodes
Send Feedback
Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same until end of the linked list. That is, in the given linked list you need to delete N nodes after every M nodes.
Input format :

Line 1 : Linked list elements (separated by space and terminated by -1)

Line 2 : M

Line 3 : N

Sample Input 1 :
1 2 3 4 5 6 7 8 -1
2
2
Sample Output 1 :
1 2 5 6
Sample Input 2 :
1 2 3 4 5 6 7 8 -1
2
3
Sample Output 2 :
1 2 6 7
// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/

node* skipMdeleteN(node  *head, int M, int N) {
    // Write your code here
if(!head)
{
    
return head;    
    
}  
if(M == 0)
return NULL;    
if(N ==0)
return head;    
int c1 = 1;
int c2 = 1;
node *t1 = head;
node *t2;
while( c1 != M && t1 != NULL)    
{
c1++;    
t1 = t1->next;    
    
    
} 
if(t1==NULL)  
return head;    
t2=t1->next;
while(c2 != N && t2 != NULL)
{
c2++; 
node *x = t2;    
t2 = t2->next;    
delete x;    
    
} 
if( t2 != NULL){    
t2=t2->next;
t1->next = t2;    
skipMdeleteN(t2,  M, N);      
return head;    
}    

else{
    
t1->next = t2;       
return head;    
    
    
} 
  
    
}

/*node* skipMdeleteN(node  *head, int M, int N) {
    // Write your code here
    node *t1=head;
    node* t2;
    if(head==NULL || N==0)
        return head;
        if(M==0)
        return NULL;
    
    while(t1!= NULL){
    int c1=1;
    
    while(c1!=M && t1!=NULL){
        c1++;
        t1=t1->next;
        
    }
        if(t1==NULL || t1->next==NULL){
            return head;
        }
    t2=t1->next;
    int c2=1;
      while(c2!=N && t2!=NULL){
        c2++;
          node* x=t2;
        t2=t2->next;
          
        delete x;
    }
        
        if(t2 != NULL){
            node* x=t2;
            delete x;
        }
    if(t2==NULL || t2->next==NULL ){
        t1->next=NULL;
        return head;
       
        
    }
    else{
         t2=t2->next;
        t1->next=t2;
    }
        t1=t2;
    }
   return head; 
}*/
