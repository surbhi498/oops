Code : Stack Using LL
Send Feedback
You need to implement a Stack class using linked list.
The data members should be private.
Implement the following public functions :
1. Constructor -
Initialises the data member (i.e. head to null).
2. push :
This function should take one argument of type T and has return type void. This function should insert an element in the stack. Time complexity should be O(1).
3. pop :
This function takes no input arguments and has return type T. This should removes the last element which is entered and return that element as an answer. Time complexity should be O(1).
4. top :
This function takes no input arguments and has return type T. This should return the last element which is entered and return that element as an answer. Time complexity should be O(1).
5. size :
Return the size of stack i.e. count of elements which are present ins stack right now. Time complexity should be O(1).
6. isEmpty :
Checks if the stack is empty or not. Return true or false.

Main Code

Code Pair

C++ (g++ 5.4)
#include <iostream>
#include <bits/stdc++.h>
#include <stack>
using namespace std; 









bool checkBalanced(char *exp) {
    // Write your code here
    stack<char> s;
    int n = strlen(exp);
    char x;    
    for(int i =0;i<n;i++)    
    {

        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')    
        {

            s.push(exp[i]);    
            continue;    

        }    


            
        switch(exp[i])
        {

            case ')': 
                if(s.empty())    
                 return false;  
                x = s.top();        
                s.pop();        
                if(x == '{' || x == '[')        
                    return false; 

                break;        

            case '}': 
                if(s.empty())    
                return false;
                x = s.top();        
                s.pop();        
                if(x =='(' || x == '[')        
                    return false;    
                break;        


            case ']': 
                if(s.empty())    
                 return false;
                x = s.top();        
                s.pop();        
                if(x == '(' || x == '{')        
                    return false;    
                break;        




        }    

    }
    return (s.empty());   
}    














1
​
2
​
3
/*******
4
 Following Node class and main already created internally. You can directly use that.
5
 
6
#include<iostream>
7
using namespace std;
8
​
9
​
10
template <typename T>
11
class Node {
12
    public :
13
    T data;
14
    Node<T> *next;
15
    
16
    Node(T data) {
17
        this -> data = data;
18
        next = NULL;
19
    }
20
};
21
​
22
#include "Stack.h"
23
    int main() {
24
        
25
        Stack<int> st;
26
        
27
        int choice;
28
        cin >> choice;
29
        int input;
30
        
31
        while (choice !=-1) {
32
            if(choice == 1) {
33
                cin >> input;
34
                st.push(input);
35
            }
36
            else if(choice == 2) {
37
                int ans = st.pop();
38
                if(ans != 0) {
39
                    cout << ans << endl;
40
                }
41
                else {
42
                    cout << "-1" << endl;
43
                }
44
            }
45
            else if(choice == 3) {
46
                int ans = st.top();
47
                if(ans != 0) {
48
                    cout << ans << endl;
49
                }
50
                else {
51
                    cout << "-1" << endl;
52
                }
53
            }
54
            else if(choice == 4) {
55
                cout << st.getSize() << endl;
56
            }
57
            else if(choice == 5) {
58
                cout << st.isEmpty() << endl;
59
            }
60
            cin >> choice;
61
        }
62
    
63
    } 
64
***********/
65
​
66
template <typename T>
67
class Stack {
68
    Node<T> *head;
69
    int size;       // number of elements prsent in stack
70
    
71
    public :
72
    
73
    Stack() {
74
     head = NULL;
75
     size = 0;   
76
    }
77
    
78
    int getSize() {
79
    return size;    
80
    }
81
    
82
    bool isEmpty() {
83
    if(head == NULL)
84
    return 1;
85
    else
86
    return 0;    
87
    }
88
    
89
    void push(T element) {
90
       Node<T> *newNode = new Node<T>(element);
91
       newNode->next = head;
92
       head = newNode;
93
       size++; 
94
    }
95
    
96
    T pop() {
97
        // Return 0 if stack is empty. Don't display any other message
98
     if(isEmpty())
99
     return 0;    
100
     T ans = head->data;  
101
     Node<T> *prev = head;
102
     head = head->next;   
103
     delete prev;
104
     size--;   
105
     return ans;   
106
        
107
    }
108
    
109
    T top() {
110
        // Return 0 if stack is empty. Don't display any other message
111
       if(isEmpty())
112
        return 0;
113
        else
114
        return head->data;    
115
           
116
           
117
    }
118
    
119
  
120
    
121
};
122
​

CUSTOM INPUT


SUBMIT SOLUTION


PREVIOUS



/*******
 Following Node class and main already created internally. You can directly use that.
 
#include<iostream>
using namespace std;


template <typename T>
class Node {
    public :
    T data;
    Node<T> *next;
    
    Node(T data) {
        this -> data = data;
        next = NULL;
    }
};

#include "Stack.h"
    int main() {
        
        Stack<int> st;
        
        int choice;
        cin >> choice;
        int input;
        
        while (choice !=-1) {
            if(choice == 1) {
                cin >> input;
                st.push(input);
            }
            else if(choice == 2) {
                int ans = st.pop();
                if(ans != 0) {
                    cout << ans << endl;
                }
                else {
                    cout << "-1" << endl;
                }
            }
            else if(choice == 3) {
                int ans = st.top();
                if(ans != 0) {
                    cout << ans << endl;
                }
                else {
                    cout << "-1" << endl;
                }
            }
            else if(choice == 4) {
                cout << st.getSize() << endl;
            }
            else if(choice == 5) {
                cout << st.isEmpty() << endl;
            }
            cin >> choice;
        }
    
    } 
***********/

template <typename T>
class Stack {
    Node<T> *head;
    int size;		// number of elements prsent in stack
    
    public :
    
    Stack() {
     head = NULL;
     size = 0;   
    }
    
    int getSize() {
    return size;    
    }
    
    bool isEmpty() {
    if(head == NULL)
    return 1;
    else
    return 0;    
    }
    
    void push(T element) {
       Node<T> *newNode = new Node<T>(element);
       newNode->next = head;
       head = newNode;
       size++; 
    }
    
    T pop() {
        // Return 0 if stack is empty. Don't display any other message
     if(isEmpty())
     return 0;    
     T ans = head->data;  
     Node<T> *prev = head;
     head = head->next;   
     delete prev;
     size--;   
     return ans;   
        
    }
    
    T top() {
        // Return 0 if stack is empty. Don't display any other message
       if(isEmpty())
        return 0;
        else
        return head->data;    
           
           
    }
    
  
    
};
