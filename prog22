kReverse
Send Feedback
Implement kReverse( int k ) in a linked list i.e. you need to reverse first K elements then reverse next k elements and join the linked list and so on.
Indexing starts from 0. If less than k elements left in the last, you need to reverse them as well. If k is greater than length of LL, reverse the complete LL.
You don't need to print the elements, just return the head of updated LL.
Input format :

Line 1 : Linked list elements (separated by space and terminated by -1)

Line 2 : k

Sample Input 1 :
1 2 3 4 5 6 7 8 9 10 -1
4
Sample Output 1 :
4 3 2 1 8 7 6 5 10 9
Sample Input 2 :
1 2 3 4 5 -1
2
Sample Output 2 :
2 1 4 3 5 
Sample Input 3 :
1 2 3 4 5 6 7 -1
3
Sample Output 3 :
3 2 1 6 5 4 7

Main Code

Code Pair

C++ (g++ 5.4)
//head is head of your linked list, i and j are indexes to be swapped
// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/
/*#include <cmath>
node* swap_nodes(node *head,int i,int j)
{
    //write your code here
    int temp = 0;
    node *x = head;
    if(i == j)
        return NULL;
    while(x->next != NULL)
    {
        temp++;
        x = x->next;
    }
    if(i > temp || j > temp)
        return NULL;
    if(i > j)
    {
        temp = i;
        i = j;
        j = temp;
    }
    node *c1 = NULL, *c2 = NULL, *p1 = head, *p2 = head, *n1 = NULL, *n2 = NULL;
    int k1 = 0;
    int k2 = 0;
    while(k1 < i - 1){
        p1 = p1->next;
        k1++;
    }
    c1 = p1->next;
    //std::cout<<p1->data<<" "<<c1->data<<endl;
    while(k2 < j - 1){
        p2 = p2->next;
        k2++;
    }
    c2 = p2->next;
    //std::cout<<p2->data<<" "<<c2->data<<endl;
    
    if((i == 0 || j == 0) && fabs(i - j) == 1)
    {
        p1->next = c2->next;
        c1->next = p2;
        head = c1;
    } 
    else if(fabs(i - j) == 1)
    {
        p1->next = c2;
        c1->next = c2->next;
        c2->next = c1;
    }
    else if(i == 0 || j == 0)
    {
        p2->next = p1;
        p1->next = c2->next;
        c2->next = c1;
        head = c2;
    } else { 
        
        n1 = c1->next;
        n2 = c2->next;
        p1->next = c2;
        p2->next = c1;
        c1->next = n2;
        c2->next = n1;
    } 
        
    return head;
}*/

node* swap_nodes(node *head,int i,int j)
 {
     //write your code here
 if(!head)
return head;    
node *temp = head;
node *temp1 = head;
node *temp34;   
node *prev2;    
node *prev = NULL;   
node *p1;
node *c1;
node *c2;
node *p2;  
int count = 0;    
 while(temp != NULL)
 {
    
count++;    
 temp = temp->next;    
    
 }    
    

for(int l =0;l<count;l++){    
//prev = p1;
    if(l==i) 
    {
    
        p1=prev;    
        c1 = temp1;    // storing
        temp34 = temp1->next;  //storing  
    
    }   
    if(l==j)
    {
        p2 = prev;    
        c2 = temp1;    //storing
        prev2 = temp1->next;    //storing
    } 
    prev = temp1;    
    temp1=temp1->next; 
}    
    
    
    
if((i==0 || j==0) && abs(i-j)==1 && j>i)
   {
    
   c1->next = c2->next;    
   c2->next = c1;    
   head = c2;    
   return head;    
        
   }        
else if((i==0 || j==0) && abs(i-j)==1 && j<i)
{
    
c2->next = c1->next;    
c1->next = c2;    
head = c1;    
return head;    
    
    
    
}    
    
else if(i==0  && j > i)
{
    
p2->next = c1; 
node *gh = c1->next;
//c2->next = c1->next;
//c1->next = c2->next; 
p2->next->next=c2->next;
c2->next = gh;
head = c2;
return head;    
    
}    
    
else if(j==0  && i > j)
{
    
p1->next = c2; 
node *gh = c2->next;
//c2->next = c1->next;
//c1->next = c2->next; 
p1->next->next=c1->next;
c1->next = gh;
head = c1;
return head;    
    
}        
    
else if(abs(i-j)==1 && j > i)
{
    
p1->next = c2;    
c1->next = c2->next;
c2->next = c1;    
return head;    
    
    
}  
else if(abs(i-j)==1 && j < i)
{
    
p2->next = c1;    
c2->next = c1->next;
c1->next = c2;    
return head;    
    
    
}  
    
    

    
else if( abs(i-j)>1 && j>i)
{
    
p1->next = c2;
p2->next = c1;
node *a = c1->next;    
c1->next = c2->next;
c2->next = a;    
return head;    
    
    
} 
    
else if( abs(i-j) >1  && j<i)
{
    
p2->next = c1;
p1->next = c2;
node *a = c2->next;       
c2->next = c1->next;
c1->next = a;    
return head;    
    
    
}     
    /*int tempyash = c1->data;
    c1->data = c2->data;
    c2->data = tempyash;*/
    
   // return head;
    
    
 }

1
//head is the head of the linked list, n is number of elements to be reversed
2
// Following is the node structure
3
/**************
4
class node{
5
public:
6
    int data;
7
    node * next;
8
    node(int data){
9
        this->data=data;
10
        this->next=NULL;
11
    }
12
};
13
***************/
14
​
15
class Pair
16
{
17
    
18
    public:
19
         node *head;
20
         node *tail;
21
};
22
Pair reverse(node *head)
23
{
24
    if(head == NULL  || head->next == NULL)
25
    {
26
        Pair ans;
27
        ans.head = head; 
28
        ans.tail = head;
29
        return ans;
30
        
31
      }   
32
Pair smallAns = reverse(head->next);    
33
smallAns.tail->next = head;
34
head->next = NULL;
35
Pair ans;
36
ans.head = smallAns.head;
37
ans.tail = head; 
38
return ans;    
39
}    
40
​
41
Pair kkreverse(node* head,int n)
42
{
43
    if(head==NULL||head->next==NULL)
44
    {
45
        Pair x;
46
        x.head=head;
47
        x.tail=head;
48
        return x;
49
    }
50
    
51
   int count=1;
52
    node*h1=head;
53
    node*t1=head;
54
    while(count<n&&t1->next!=NULL)
55
    {
56
        t1=t1->next;
57
        count++;
58
    }
59
    node*h2=t1->next;
60
    t1->next=NULL;
61
    
62
    Pair value=reverse(h1);
63
    h1=value.head;
64
    t1=value.tail;
65
    Pair sans=kkreverse(h2,n);
66
    t1->next=sans.head;
67
    Pair x;
68
    x.head=h1;
69
    x.tail=sans.tail;
70
    return x;
71
     
72
}
73
node* kReverse(node*head,int n)
74
{
75
    
76
    Pair answer=kkreverse(head,n);
77
    return answer.head;
78
}
79
/*node* kReverse(node*head,int n)
80
{
81
    //write your code here
82
int count =1;
83
node *h1 =head;
84
node *t1 = head;
85
node *h2; 
86
node *temp;    
87
while(count != n)
88
{
89
count++;    
90
t1 = t1->next;    
91
    
92
}    
93
h2=t1->next;
94
t1->next = NULL;
95
Pair smallAns = reverse(h1);    
96
​
97
    
98
temp = kReverse(h2,n);  
99
t1->next = temp;
100
return (smallAns.head);    
101
}*/
102
​

CUSTOM INPUT


SUBMIT SOLUTION

